import { DataSource, Repository } from 'typeorm';
import { Proforma } from './proforma.entity';
import { User } from 'src/users/users.entity';
import { ConfigService } from '@nestjs/config';
import { ProformaGoods } from './proforma-goods.entity';
export declare class ProformaService {
    private proformaRepository;
    private proformaGoodsRepository;
    private readonly dataSource;
    private configService;
    constructor(proformaRepository: Repository<Proforma>, proformaGoodsRepository: Repository<ProformaGoods>, dataSource: DataSource, configService: ConfigService);
    createProforma(data: Partial<Proforma>, user: User): Promise<Proforma>;
    getAll(): Promise<Proforma[] | null>;
    getProforma(id: number): Promise<Proforma | null>;
    getAllByUser(page: number, limit: number, search: string, user: Partial<User>): Promise<{
        items: Proforma[];
        total: number;
    }>;
    updateProforma(id: number, data: Partial<Proforma>, updatedBy: User): Promise<Proforma>;
    setProformaIsAccepted(id: number, acceptedBy: User): Promise<{
        isAccepted: true;
        acceptedBy: User;
        id: number;
        title: string;
        isConverted: boolean;
        convertedBy: User;
        customer: import("../customer/customer.entity").Customer;
        totalAmount: number;
        paymentStatus: import("../common/decorators/payment.enum").PaymentTypes;
        chequeDate: Date;
        chequeAmount: number;
        chequeSerial: number;
        paperMoneyDate: Date;
        paperMoneyAmount: number;
        paperMoneySerial: number;
        trustIssueDate: Date;
        approvedFile: string;
        customerLink: string;
        description: string;
        createdAt: Date;
        updatedAt: Date;
        sepidarId: string;
        isSent: boolean;
        proformaGoods: ProformaGoods[];
        createdBy: User;
    } & Proforma>;
    setProformaIsSent(id: number): Promise<{
        isSent: true;
        id: number;
        title: string;
        isConverted: boolean;
        convertedBy: User;
        isAccepted: boolean;
        acceptedBy: User;
        customer: import("../customer/customer.entity").Customer;
        totalAmount: number;
        paymentStatus: import("../common/decorators/payment.enum").PaymentTypes;
        chequeDate: Date;
        chequeAmount: number;
        chequeSerial: number;
        paperMoneyDate: Date;
        paperMoneyAmount: number;
        paperMoneySerial: number;
        trustIssueDate: Date;
        approvedFile: string;
        customerLink: string;
        description: string;
        createdAt: Date;
        updatedAt: Date;
        sepidarId: string;
        proformaGoods: ProformaGoods[];
        createdBy: User;
    } & Proforma>;
    convertToInvoice(id: number, user: User): Promise<Proforma>;
    deleteProforma(id: number): Promise<void>;
    generateShareableLink(proformaId: number): Promise<string>;
    renewProformaToken(proformaId: number): Promise<string | undefined>;
    verifyAndFetchProforma(token: string): Promise<Proforma>;
}
